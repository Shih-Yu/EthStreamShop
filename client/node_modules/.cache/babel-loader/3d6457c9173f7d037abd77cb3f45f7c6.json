{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\n\nconst classes_1 = require(\"./classes\");\n\nconst utils_1 = require(\"./utils\");\n\nconst error_constants_1 = require(\"./error-constants\");\n\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n\n      const {\n        code\n      } = opts;\n\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n\n      return getEthJsonRpcError(code, opts);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n\n      const {\n        code,\n        message,\n        data\n      } = opts;\n\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n\n      return [message || undefined, data];\n    }\n  }\n\n  return [];\n}","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst utils_1 = require(\"./utils\");\nconst error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n    rpc: {\n        /**\n         * Get a JSON RPC 2.0 Parse (-32700) error.\n         */\n        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n         */\n        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n         */\n        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n        /**\n         * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n         */\n        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n        /**\n         * Get a JSON RPC 2.0 Internal (-32603) error.\n         */\n        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n        /**\n         * Get a JSON RPC 2.0 Server error.\n         * Permits integer error codes in the [ -32099 <= -32005 ] range.\n         * Codes -32000 through -32004 are reserved by EIP-1474.\n         */\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        /**\n         * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n         */\n        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n         */\n        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n         */\n        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n        /**\n         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n         */\n        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n        /**\n         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n         */\n        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n        /**\n         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n         */\n        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        /**\n         * Get an Ethereum Provider User Rejected Request (4001) error.\n         */\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unauthorized (4100) error.\n         */\n        unauthorized: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unsupported Method (4200) error.\n         */\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n        },\n        /**\n         * Get an Ethereum Provider Not Connected (4900) error.\n         */\n        disconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n        },\n        /**\n         * Get an Ethereum Provider Chain Not Connected (4901) error.\n         */\n        chainDisconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n        },\n        /**\n         * Get a custom Ethereum Provider error.\n         */\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new classes_1.EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\n"]},"metadata":{},"sourceType":"script"}